#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4 coding=utf-8
# maintainer: rgaudin

''' kiwix box host helper script

    gives easy access to vbox usefull functions. '''

import os
import sys
import subprocess
from optparse import OptionParser

def get_homedir(username):
    p = subprocess.Popen(["getent", "passwd", username], stdout=subprocess.PIPE)
    out, err = p.communicate()
    return out.split(':')[5]

BB_HOMEDIR = get_homedir("buildbot")

# configure following
machines = {
    'ubuntu32': '192.168.5.50',
    'ubuntu64': '192.168.5.51',
    'osx': '192.168.5.52',
    'win32': '192.168.5.53',
    # 'win64': '192.168.5.54',
    'fedora': '192.168.5.55',
    'arm': '192.168.5.56',
    'debian32': '192.168.5.57',
    'debian64': '192.168.5.58',
    'precise64': '192.168.5.59',
}


class VirtualMachine(object):

    instances = []
    HEADLESS = '/usr/bin/VBoxHeadless'
    MANAGE = '/usr/bin/VBoxManage'
    GREP = '/usr/bin/grep'
    SSH = '/usr/bin/ssh'
    QEMU = '%s/vms/launch_qemu' % BB_HOMEDIR
    QEMU_RUNNING = '%s/vms/is_qemu_running' % BB_HOMEDIR
    QEMU_HALT = '%s/vms/halt_qemu' % BB_HOMEDIR

    def __call__(self, *args, **kw):
        ins = VirtualMachine(*args, **kw)
        return ins

    def __init__(self, name):
        self.name = name
        VirtualMachine.instances.append(self)

    def __str__(self):
        return self.name

    @classmethod
    def all(cls):
        return cls.instances

    @classmethod
    def get(cls, id_):
        for ins in cls.all():
            if ins.name == id_:
                return ins
        raise NameError

    def start(self):
        if self.name.lower() == 'arm':
            subprocess.Popen([self.QEMU])
        else:
            subprocess.Popen([self.HEADLESS, '--startvm', self.name,
                              '--vrdp', 'off'])

    def startWithExport(self):
        if self.name.lower() == 'arm':
            subprocess.Popen([self.QEMU])
        else:
            subprocess.Popen([self.HEADLESS, '--startvm', self.name,
                              '--vrdp', 'config'])

    def stop(self):
        if self.name.lower() == 'osx':
            ip = machines.get(self.name, None)
            if ip:
                subprocess.Popen('%s dev@%s "sudo /sbin/shutdown -h now"' % (self.SSH, self.name), shell=True)
        elif self.name.lower() == 'arm':
            subprocess.Popen([self.QEMU_HALT])
        else:
            subprocess.Popen([self.MANAGE, 'controlvm',
                              self.name, 'acpipowerbutton'])

    def export(self):
        if self.name.lower() == 'arm':
            print "Still unable to export a Qemu VM."
        else:
            if self.isrunning():
                print "Please stop the VM before exporting it."
            else:
                p1 = subprocess.Popen([self.MANAGE, 'export', self.name,
                              '--output', self.name + '.ova'])
                p1.wait()

    def info(self):
        if self.name.lower() == 'arm':
            pass
        else:
            subprocess.Popen([self.MANAGE, 'showvminfo', self.name])

    def isrunning(self):
        if self.name.lower() == 'arm':
            p1 = subprocess.Popen([self.QEMU_RUNNING], stdout=subprocess.PIPE)
            if 'yes' in ''.join(p1.stdout).strip():
                return True
            else:
                return False
        else:
            p1 = subprocess.Popen([self.MANAGE, 'showvminfo', self.name], stdout=subprocess.PIPE)

            for line in p1.stdout:
                if 'State' not in line: continue
                if 'running' in line:
                    return True
            return False

    @classmethod
    def usb(self):
        subprocess.Popen([self.MANAGE, 'list', 'usbhost'])


def listlocal(option, opt_str, value, parser, *args, **kwargs):
    for vm in VirtualMachine.all():
        print vm


def listall(option, opt_str, value, parser, *args, **kwargs):
    for vm in VirtualMachine.all():
        print u"%(vm)s: %(state)s" \
              % {'vm': vm, 'state': 'on' if vm.isrunning() else 'off'}


def startall(option, opt_str, value, parser, *args, **kwargs):

    for vm in VirtualMachine.all():
        vm.start()


def stopall(option, opt_str, value, parser, *args, **kwargs):

    for vm in VirtualMachine.all():
        vm.stop()


def start(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.start()

def startWithExport(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.startWithExport()


def stop(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.stop()

def export(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.export()

def info(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.info()


def usb(option, opt_str, value, parser, *args, **kwargs):
    VirtualMachine.usb()

def ssh(option, opt_str, value, parser, *args, **kwargs):

    if value == 'arm':
        os.execl('/usr/bin/ssh', 'ssh', "dev@localhost", "-p", "5022")
    else:
        ip = machines.get(value, None)
        if ip:
            os.execl('/usr/bin/ssh', 'ssh', "dev@%s" % value)


def main():

    # instanciate VMs
    for name in machines.keys():
        VirtualMachine(name)

    parser = OptionParser()

    parser.description = "Handy wrapper around virtualbox for kiwix"

    parser.add_option("--listlocal", action="callback", callback=listlocal, \
                      help="list names of VMs. Edit script to change.")
    parser.add_option("--listall", action="callback", callback=listall, \
                      help="list all VMs with their status.")
    parser.add_option("--usb", action="callback", callback=usb, \
                      help="list all USB devices on the host.")
    parser.add_option("--startall", action="callback", callback=startall, \
                      help="start all VMs.")
    parser.add_option("--stopall", action="callback", callback=stopall, \
                      help="sends shutdown to all VMs.")
    parser.add_option("--start", action="callback", callback=start, \
                      type="str", metavar="VM", \
                      help="starts the VM named [VM].")
    parser.add_option("--start-with-export", action="callback", callback=startWithExport, \
                      type="str", metavar="VM", \
                      help="starts the VM named [VM] with export display (vrdp).")
    parser.add_option("--stop", action="callback", callback=stop, type="str", \
                      metavar="VM", \
                      help="sends shutdown to the VM named [VM].")
    parser.add_option("--info", action="callback", callback=info, type="str", \
                      metavar="VM", \
                      help="displays info for the VM named [VM].")
    parser.add_option("--ssh", action="callback", callback=ssh, type="str", \
                      metavar="VM", \
                      help="connects via SSH to the VM named [VM].")
    parser.add_option("--export", action="callback", callback=export, type="str", \
                      metavar="VM", \
                      help="export VM to the file called [VM].ova.")

    # Show help if no argument
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    (options, args) = parser.parse_args()

if __name__ == '__main__':
    main()
