# -*- python -*-
# ex: set syntax=python:

try:
    from .secret_pass import (WINXP64_PASS, WINXP32_PASS,
                             UBUNTU32_PASS, UBUNTU64_PASS,
                             MACOSX_PASS, FEDORA9_PASS, ARM_PASS,
                             WEBUI_USERS)
except:
    raise ImportError("Unable to import password from file secret_pass")


KIWIX_SVN_URL = 'https://kiwix.svn.sourceforge.net/svnroot/kiwix/moulinkiwix/'
BIN_RELEASE_FOLDER = '/var/www/download.kiwix.org/bin/nightly'
SRC_RELEASE_FOLDER = '/var/www/download.kiwix.org/src/nightly'
PACKAGE = 'kiwix'
VERSION = '0.9'
FBASE = '%s-%s' % (PACKAGE, VERSION)
FDIST = '%s.tar.gz' % FBASE
FS32 = '%s-static-i686.tar.bz2' % FBASE
FS64 = '%s-static-x86_64.tar.bz2' % FBASE
FM32 = '%s-i386.dmg' % FBASE
FM64 = '%s-x86_64.dmg' % FBASE
FMU = '%s.dmg' % FBASE
ARS = '%s-server_armv5tejl.tar' % FBASE
OSXPATH = '/usr/bin:/bin:/usr/sbin:/usr/local/bin:/usr/X11/bin:/opt/local/bin'
OSXENV = {'PATH': OSXPATH}

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Properties
c['properties'] = {
    'package' : PACKAGE,
    'packagec': PACKAGE.title(),
    'version' : VERSION,
    'fbase': FBASE
}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [
    BuildSlave('winxp64', WINXP64_PASS, max_builds=1, properties={}),
    BuildSlave('winxp32', WINXP32_PASS, max_builds=1, properties={}),
    BuildSlave('ubuntu32', UBUNTU32_PASS, max_builds=1, properties={}),
    BuildSlave('ubuntu64', UBUNTU64_PASS, max_builds=1, properties={}),
    BuildSlave('macosx', MACOSX_PASS, max_builds=1, properties={}),
    BuildSlave('fedora9', FEDORA9_PASS, max_builds=1, properties={}),
    BuildSlave('arm', ARM_PASS, max_builds=1, properties={}),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_alwaystrunk
c['change_source'] = SVNPoller(split_file=split_file_alwaystrunk,
                               svnurl=KIWIX_SVN_URL,
                               pollinterval=600)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

all_builders = ["mac-universal", "linux-32b", "linux-64b", "fedora-sugar", "arm-server"]

from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers import timed

c['schedulers'] = []

def important_changes(change):
    # for now, let's consider all changes as important
    # and we'll filter later
    return True

weekly = timed.Periodic(name="weekly", builderNames=["arm-server"], periodicBuildTimer=7*24*60*60)
midnight = timed.Nightly(name="midnight", builderNames=["linux-32b"], minute=0, hour=0, branch=None, onlyIfChanged=True, onlyImportant=True, fileIsImportant=important_changes)
one_am = timed.Nightly(name="1am", builderNames=["linux-64b"], minute=0, hour=1, branch=None, onlyIfChanged=True, onlyImportant=True, fileIsImportant=important_changes)
two_am = timed.Nightly(name="2am", builderNames=["mac-universal"], minute=0, hour=2, branch=None, onlyIfChanged=True, onlyImportant=True, fileIsImportant=important_changes)
three_am = timed.Nightly(name="3am", builderNames=["fedora-sugar"], minute=0, hour=3, branch=None, onlyIfChanged=True, onlyImportant=True, fileIsImportant=important_changes)
#four_am = timed.Nightly(name="4am", builderNames=["arm-server"], minute=0, hour=4, branch=None, onlyIfChanged=True, onlyImportant=True, fileIsImportant=important_changes)

c['schedulers'].append(midnight)
c['schedulers'].append(one_am)
c['schedulers'].append(two_am)
c['schedulers'].append(three_am)
c['schedulers'].append(weekly)

c['schedulers'].append(ForceScheduler(
                       name="force",
                       builderNames=all_builders))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.slave import FileExists
from buildbot.steps.transfer import FileUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import WithProperties

checkout_step = SVN(mode='full', 
                    repourl=KIWIX_SVN_URL)
autogen_step = ShellCommand(command=["./autogen.sh", "alt"], description="configure generation")
makedep_step = Compile(command=["make"], workdir="build/src/dependencies", description="dependencies compile")
confdep_step = Configure(command=["./configure", "--enable-compileall"])

dateprop_step = SetProperty(command="date +%%F", property="tdate")

master_folder = MasterShellCommand(command="tdate=`date +%%F` && mkdir -p %(dest1)s/${tdate} && "
                                           "ln -sf %(dest1)s/${tdate} %(dest1)s/latest && "
                                           "chmod 775 %(dest1)s/* -R && "
                                           "mkdir -p %(dest2)s/${tdate} && "
                                           "ln -sf %(dest2)s/${tdate} %(dest2)s/latest && "
                                           "chmod 775 %(dest2)s/* -R" 
                                           % {'dest1': BIN_RELEASE_FOLDER,
                                              'dest2': SRC_RELEASE_FOLDER})

def check_file(fname):
    return FileExists(file='build/%(file)s' % {'file': fname})

def transfer_step(fname, target='bin'):
    if target == 'bin':
        dest = BIN_RELEASE_FOLDER
        url_base = WithProperties("http://download.kiwix.org/bin/nightly/%(tdate)s")
    else:
        dest = SRC_RELEASE_FOLDER
        url_base = WithProperties("http://download.kiwix.org/src/nightly/%(tdate)s")
    return FileUpload(slavesrc=fname,
                      mode=775,
                      url="%(urlb)s/%(file)s" % {'file': fname, 'urlb': url_base},
                      masterdest="%(dest)s/%(date)s/%(file)s" % {'dest': dest, 
                                                                 'file': fname,
                                                                 'date': WithProperties("%(tdate)s")})

# Linux factory. Used both for 32b & 64b.
lin_fact = BuildFactory()
lin_fact.addStep(checkout_step)
lin_fact.addStep(autogen_step)
lin_fact.addStep(confdep_step)
lin_fact.addStep(makedep_step)
lin_fact.addStep(confdep_step)
lin_fact.addStep(Compile())
lin_fact.addStep(Compile(command=["make", "diststatic"]))
lin_fact.addStep(master_folder)

import copy
lin32_fact = copy.deepcopy(lin_fact)
lin64_fact = copy.deepcopy(lin_fact)

lin32_fact.addStep(check_file(FS32))
lin32_fact.addStep(transfer_step(FS32))
lin32_fact.addStep(Compile(command=["make", "dist"]))
lin32_fact.addStep(check_file(FDIST))
lin32_fact.addStep(transfer_step(FDIST, 'src'))

lin64_fact.addStep(check_file(FS64))
lin64_fact.addStep(transfer_step(FS64))

# Windows factory.
win_fact = BuildFactory()
win_fact.addStep(checkout_step)
win_fact.addStep(autogen_step)
win_fact.addStep(confdep_step)
win_fact.addStep(makedep_step)
win_fact.addStep(confdep_step)
win_fact.addStep(Compile(command=["make", "win"]))
win_fact.addStep(master_folder)

# OSX factory.
mac_fact = BuildFactory()
mac_fact.addStep(checkout_step)
mac_fact.addStep(autogen_step)
mac_fact.addStep(confdep_step)
mac_fact.addStep(makedep_step)
mac_fact.addStep(Configure(command=["./configure", "--enable-compileall", "--disable-dependency-tracking", "--with-target-arch=i386"]))
mac_fact.addStep(Compile())
mac_fact.addStep(Compile(command=["make", "distmac"]))
mac_fact.addStep(check_file(FM32))
mac_fact.addStep(Configure(command=["./configure", "--enable-compileall", "--disable-dependency-tracking", "--with-target-arch=x86_64"]))
mac_fact.addStep(Compile(command=["make", "clean"]))
mac_fact.addStep(Compile())
mac_fact.addStep(Compile(command=["make", "distmac"]))
mac_fact.addStep(check_file(FM64))
mac_fact.addStep(Compile(command=["make", "universal"]))
mac_fact.addStep(check_file(FMU))
mac_fact.addStep(master_folder)
mac_fact.addStep(transfer_step(FMU))

# Sugar factory
# Linux factory. Used both for 32b & 64b.
sugar_fact = BuildFactory()
sugar_fact.addStep(checkout_step)
sugar_fact.addStep(autogen_step)
sugar_fact.addStep(Configure(command=["./configure", "--enable-compileall", "--enable-oldgecko"]))
sugar_fact.addStep(makedep_step)
sugar_fact.addStep(Configure(command=["./configure", "--enable-compileall", "--enable-oldgecko"]))
sugar_fact.addStep(Compile())
sugar_fact.addStep(Compile(command=["make", "distsugar"]))
sugar_fact.addStep(SetProperty(command='grep activity_version src/sugar/activity/activity.info | cut -d " " -f3', property="sugar_version"))
sugar_fact.addStep(master_folder)
sugar_fact.addStep(FileExists(file=WithProperties('build/%(packagec)s-%(sugar_version)s.xo')))
sugar_fact.addStep(transfer_step(WithProperties('%(packagec)s-%(sugar_version)s.xo')))

arm_fact = BuildFactory()
arm_fact.addStep(checkout_step)
arm_fact.addStep(autogen_step)
arm_fact.addStep(Configure(command=["./configure", "--enable-compileall", "--disable-components", "--disable-manager", "--disable-launcher", "--disable-indexer", "--disable-installer", "--disable-searcher", "--disable-reader"]))
arm_fact.addStep(makedep_step)
arm_fact.addStep(Compile())
arm_fact.addStep(Compile(command=["make", "distserver"]))
arm_fact.addStep(check_file(ARS))
arm_fact.addStep(master_folder)
arm_fact.addStep(transfer_step(ARS))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(name="mac-universal",
                                   slavenames=["macosx"],
                                   factory=mac_fact,
                                   env=OSXENV))
c['builders'].append(BuilderConfig(name="linux-32b",
                                   slavenames=["ubuntu32"],
                                   factory=lin32_fact))
c['builders'].append(BuilderConfig(name="linux-64b",
                                   slavenames=["ubuntu64"],
                                   factory=lin64_fact))
c['builders'].append(BuilderConfig(name="fedora-sugar",
                                   slavenames=["fedora9"],
                                   factory=sugar_fact))
c['builders'].append(BuilderConfig(name="arm-server",
                                   slavenames=["arm"],
                                   factory=arm_fact))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(WEBUI_USERS),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import mail
m = mail.MailNotifier(fromaddr="buildbot@kiwix.org",
                      extraRecipients=["kiwix-build@lists.sourceforge.net"],
                      sendToInterestedUsers=False)
c['status'].append(m)

from buildbot.status import words
irc = words.IRC(host="irc.ubuntu.com", nick="KiwixBuilder",
                channels=[{"channel": "#kiwix"}],
                notify_events={'exception': 1,
                               'successToFailure': 1,
                               'failureToSuccess': 1})
c['status'].append(irc)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Kiwix"
c['titleURL'] = "http://www.kiwix.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.kiwix.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
